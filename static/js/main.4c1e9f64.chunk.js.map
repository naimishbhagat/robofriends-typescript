{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","App.tsx","reportWebVitals.ts","registerServiceWorker.ts","index.tsx"],"names":["Card","id","name","email","data-testid","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","value","onChange","App","useState","setRobots","error","setError","setSearchField","getRobots","a","fetch","fetchData","ok","json","response","status","Promise","reject","message","useEffect","mounted","then","data","catch","err","filteredRobots","length","filter","robot","toLowerCase","includes","event","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","StrictMode","document","getElementById","URL","process","toString","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4c1e9f64.chunk.js","sourcesContent":["import React from \"react\";\r\ninterface Props {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\nconst Card: React.FC<Props> = ({ id, name, email }) => {\r\n  return (\r\n    <div\r\n      data-testid={`robot-${id}`}\r\n      className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\"\r\n    >\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { RobotType } from \"../types\";\r\nimport Card from \"./Card\";\r\n\r\ninterface Props {\r\n  robots: RobotType[];\r\n}\r\nconst CardList: React.FC<Props> = ({ robots }) => {\r\n  return (\r\n    <div data-testid=\"robotList\">\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\ninterface Props {\r\n  searchChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  searchField: string;\r\n}\r\nconst SearchBox: React.FC<Props> = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\" data-testid=\"searchBox\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        data-testid=\"search\"\r\n        placeholder=\"search robots\"\r\n        value={searchField}\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport { RobotType } from \"./types\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./App.css\";\n\nfunction App() {\n  const [robots, setRobots] = useState<RobotType[]>([]);\n  const [error, setError] = useState<string | boolean>(false);\n  const [searchField, setSearchField] = useState<string>(\"\");\n  const getRobots = async (): Promise<void> => {\n    try {\n      const fetchData = await fetch(\n        \"https://jsonplaceholder.typicode.com/users\"\n      );\n\n      if (fetchData.ok) {\n        const response = await fetchData.json();\n        return response;\n      } else if (fetchData.status > 200 && fetchData.status < 500) {\n        return Promise.reject(\"Error 404\");\n      } else {\n        return Promise.reject(\"Some other error: \" + fetchData.status);\n      }\n    } catch (err) {\n      return Promise.reject(err.message);\n    }\n  };\n  useEffect(() => {\n    let mounted = true;\n\n    getRobots()\n      .then((data) => {\n        if (mounted) {\n          setRobots(data as any);\n        }\n      })\n      .catch((err) => {\n        if (mounted) {\n          setError(err);\n        }\n      });\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setSearchField(event.target.value);\n  };\n  if (error) {\n    return <div data-testid=\"error\">{error}</div>;\n  }\n  const filteredRobots =\n    robots.length > 0\n      ? robots.filter((robot) => {\n          return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n      : [];\n  return !robots.length ? (\n    <h1 data-testid=\"loading\">Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">Robofriends</h1>\n      <SearchBox searchChange={onSearchChange} searchField={searchField} />\n      <CardList robots={filteredRobots} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === \"installed\") {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log(\"New content is available; please refresh.\");\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log(\"Content is cached for offline use.\");\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregisterServiceWorker();\n"],"sourceRoot":""}